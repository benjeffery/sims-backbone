--
-- PostgreSQL database dump
--

-- Dumped from database version 10.1
-- Dumped by pg_dump version 10.1

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: backbone_service; Type: SCHEMA; Schema: -; Owner: iwright
--

CREATE SCHEMA backbone_service;


ALTER SCHEMA backbone_service OWNER TO iwright;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: postgis; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA backbone_service;


--
-- Name: EXTENSION postgis; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis IS 'PostGIS geometry, geography, and raster spatial types and functions';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: archive; Type: TABLE; Schema: public; Owner: iwright
--

CREATE TABLE archive (
    id integer NOT NULL,
    submitter character varying(64),
    action_id character varying(64),
    entity_id character varying(64),
    input_value text,
    output_value text,
    result_code integer,
    action_date timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE archive OWNER TO iwright;

--
-- Name: archive_id_seq; Type: SEQUENCE; Schema: public; Owner: iwright
--

CREATE SEQUENCE archive_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE archive_id_seq OWNER TO iwright;

--
-- Name: archive_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: iwright
--

ALTER SEQUENCE archive_id_seq OWNED BY archive.id;


--
-- Name: countries; Type: TABLE; Schema: public; Owner: iwright
--

CREATE TABLE countries (
    english character varying,
    french character varying,
    alpha2 character(2),
    alpha3 character(3),
    numeric_code integer
);


ALTER TABLE countries OWNER TO iwright;

--
-- Name: event_set_members; Type: TABLE; Schema: public; Owner: iwright
--

CREATE TABLE event_set_members (
    event_set_id integer,
    sampling_event_id uuid
);


ALTER TABLE event_set_members OWNER TO iwright;

--
-- Name: event_set_notes; Type: TABLE; Schema: public; Owner: iwright
--

CREATE TABLE event_set_notes (
    event_set_id integer NOT NULL,
    note_name character varying(128) NOT NULL,
    note_text text
);


ALTER TABLE event_set_notes OWNER TO iwright;

--
-- Name: event_sets; Type: TABLE; Schema: public; Owner: iwright
--

CREATE TABLE event_sets (
    id integer NOT NULL,
    event_set_name character varying(128) NOT NULL
);


ALTER TABLE event_sets OWNER TO iwright;

--
-- Name: event_sets_id_seq; Type: SEQUENCE; Schema: public; Owner: iwright
--

CREATE SEQUENCE event_sets_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE event_sets_id_seq OWNER TO iwright;

--
-- Name: event_sets_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: iwright
--

ALTER SEQUENCE event_sets_id_seq OWNED BY event_sets.id;


--
-- Name: identifiers; Type: TABLE; Schema: public; Owner: iwright
--

CREATE TABLE identifiers (
    sample_id uuid,
    identifier_type character varying(20),
    identifier_value character varying(256)
);


ALTER TABLE identifiers OWNER TO iwright;

--
-- Name: location_identifiers; Type: TABLE; Schema: public; Owner: iwright
--

CREATE TABLE location_identifiers (
    location_id uuid,
    study_id uuid,
    identifier_type character varying(20),
    identifier_value character varying(256)
);


ALTER TABLE location_identifiers OWNER TO iwright;

--
-- Name: locations; Type: TABLE; Schema: public; Owner: iwright
--

CREATE TABLE locations (
    id uuid NOT NULL,
    mgid character(20),
    location backbone_service.geometry(Point),
    country character(3),
    "precision" character varying,
    curated_name character varying,
    curation_method character varying,
    notes character varying
);


ALTER TABLE locations OWNER TO iwright;

--
-- Name: partner_species_identifiers; Type: TABLE; Schema: public; Owner: iwright
--

CREATE TABLE partner_species_identifiers (
    id uuid NOT NULL,
    study_id uuid,
    partner_species character varying(128)
);


ALTER TABLE partner_species_identifiers OWNER TO iwright;

--
-- Name: samples; Type: TABLE; Schema: public; Owner: iwright
--

CREATE TABLE samples (
    id uuid NOT NULL,
    mgid character(20),
    study_id uuid,
    doc date,
    doc_accuracy character varying,
    partner_species_id uuid,
    location_id uuid,
    proxy_location_id uuid
);


ALTER TABLE samples OWNER TO iwright;

--
-- Name: studies; Type: TABLE; Schema: public; Owner: iwright
--

CREATE TABLE studies (
    id uuid NOT NULL,
    mgid character(20),
    study_name character varying(64),
    study_code character varying(4)
);


ALTER TABLE studies OWNER TO iwright;

--
-- Name: taxonomies; Type: TABLE; Schema: public; Owner: iwright
--

CREATE TABLE taxonomies (
    id bigint NOT NULL,
    rank character varying(32),
    name character varying(128)
);


ALTER TABLE taxonomies OWNER TO iwright;

--
-- Name: taxonomy_identifiers; Type: TABLE; Schema: public; Owner: iwright
--

CREATE TABLE taxonomy_identifiers (
    taxonomy_id bigint,
    partner_species_id uuid
);


ALTER TABLE taxonomy_identifiers OWNER TO iwright;

--
-- Name: v_sampling_events; Type: VIEW; Schema: public; Owner: iwright
--

CREATE VIEW v_sampling_events AS
 SELECT samples.id,
    studies.study_name AS study_id,
    samples.doc,
    samples.doc_accuracy,
    partner_species_identifiers.partner_species,
    samples.partner_species_id,
    samples.location_id,
    backbone_service.st_x(loc.location) AS latitude,
    backbone_service.st_y(loc.location) AS longitude,
    loc."precision" AS accuracy,
    loc.curated_name,
    loc.curation_method,
    loc.country,
    loc.notes,
    li.identifier_value AS partner_name,
    samples.proxy_location_id,
    backbone_service.st_x(proxy_loc.location) AS proxy_latitude,
    backbone_service.st_y(proxy_loc.location) AS proxy_longitude,
    proxy_loc."precision" AS proxy_accuracy,
    proxy_loc.curated_name AS proxy_curated_name,
    proxy_loc.curation_method AS proxy_curation_method,
    proxy_loc.country AS proxy_country,
    proxy_loc.notes AS proxy_notes,
    pli.identifier_value AS proxy_partner_name
   FROM ((((((samples
     LEFT JOIN studies ON ((studies.id = samples.study_id)))
     LEFT JOIN partner_species_identifiers ON ((partner_species_identifiers.id = samples.partner_species_id)))
     LEFT JOIN locations loc ON ((loc.id = samples.location_id)))
     LEFT JOIN location_identifiers li ON (((li.study_id = samples.study_id) AND (li.location_id = loc.id) AND ((li.identifier_type)::text = 'partner_name'::text))))
     LEFT JOIN locations proxy_loc ON ((proxy_loc.id = samples.proxy_location_id)))
     LEFT JOIN location_identifiers pli ON (((pli.study_id = samples.study_id) AND (pli.location_id = loc.id) AND ((pli.identifier_type)::text = 'partner_name'::text))));


ALTER TABLE v_sampling_events OWNER TO iwright;

--
-- Name: archive id; Type: DEFAULT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY archive ALTER COLUMN id SET DEFAULT nextval('archive_id_seq'::regclass);


--
-- Name: event_sets id; Type: DEFAULT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY event_sets ALTER COLUMN id SET DEFAULT nextval('event_sets_id_seq'::regclass);


--
-- Name: locations location_id; Type: CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY locations
    ADD CONSTRAINT location_id PRIMARY KEY (id);


--
-- Name: partner_species_identifiers partner_species_identifiers_id; Type: CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY partner_species_identifiers
    ADD CONSTRAINT partner_species_identifiers_id PRIMARY KEY (id);


--
-- Name: event_sets pk_es; Type: CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY event_sets
    ADD CONSTRAINT pk_es PRIMARY KEY (id);


--
-- Name: event_set_notes pk_esn; Type: CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY event_set_notes
    ADD CONSTRAINT pk_esn PRIMARY KEY (event_set_id, note_name);


--
-- Name: samples sample_id; Type: CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY samples
    ADD CONSTRAINT sample_id PRIMARY KEY (id);


--
-- Name: studies studies_id; Type: CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY studies
    ADD CONSTRAINT studies_id PRIMARY KEY (id);


--
-- Name: taxonomies taxonomy_id; Type: CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY taxonomies
    ADD CONSTRAINT taxonomy_id PRIMARY KEY (id);


--
-- Name: event_set_members uniq_event_set_members; Type: CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY event_set_members
    ADD CONSTRAINT uniq_event_set_members UNIQUE (event_set_id, sampling_event_id);


--
-- Name: event_sets uniq_event_sets; Type: CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY event_sets
    ADD CONSTRAINT uniq_event_sets UNIQUE (event_set_name);


--
-- Name: location_identifiers uniq_loc_ident; Type: CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY location_identifiers
    ADD CONSTRAINT uniq_loc_ident UNIQUE (location_id, study_id, identifier_type);


--
-- Name: location_identifiers uniq_loc_name_ident; Type: CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY location_identifiers
    ADD CONSTRAINT uniq_loc_name_ident UNIQUE (study_id, identifier_type, identifier_value);


--
-- Name: studies uniq_study_code; Type: CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY studies
    ADD CONSTRAINT uniq_study_code UNIQUE (study_code);


--
-- Name: fki_fk_esm_es; Type: INDEX; Schema: public; Owner: iwright
--

CREATE INDEX fki_fk_esm_es ON event_set_members USING btree (event_set_id);


--
-- Name: fki_fk_esm_se; Type: INDEX; Schema: public; Owner: iwright
--

CREATE INDEX fki_fk_esm_se ON event_set_members USING btree (sampling_event_id);


--
-- Name: fki_fk_esn_es; Type: INDEX; Schema: public; Owner: iwright
--

CREATE INDEX fki_fk_esn_es ON event_set_notes USING btree (event_set_id);


--
-- Name: fki_location; Type: INDEX; Schema: public; Owner: iwright
--

CREATE INDEX fki_location ON samples USING btree (location_id);


--
-- Name: fki_location_id; Type: INDEX; Schema: public; Owner: iwright
--

CREATE INDEX fki_location_id ON location_identifiers USING btree (location_id);


--
-- Name: fki_proxy_location; Type: INDEX; Schema: public; Owner: iwright
--

CREATE INDEX fki_proxy_location ON samples USING btree (proxy_location_id);


--
-- Name: fki_sample_id; Type: INDEX; Schema: public; Owner: iwright
--

CREATE INDEX fki_sample_id ON identifiers USING btree (sample_id);


--
-- Name: idx_ident_type; Type: INDEX; Schema: public; Owner: iwright
--

CREATE INDEX idx_ident_type ON location_identifiers USING btree (identifier_type);


--
-- Name: idx_ident_value; Type: INDEX; Schema: public; Owner: iwright
--

CREATE INDEX idx_ident_value ON location_identifiers USING btree (identifier_value);


--
-- Name: idx_partner_species; Type: INDEX; Schema: public; Owner: iwright
--

CREATE INDEX idx_partner_species ON partner_species_identifiers USING btree (partner_species);


--
-- Name: idx_study_name; Type: INDEX; Schema: public; Owner: iwright
--

CREATE INDEX idx_study_name ON studies USING btree (study_name);


--
-- Name: event_set_members fk_esm_es; Type: FK CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY event_set_members
    ADD CONSTRAINT fk_esm_es FOREIGN KEY (event_set_id) REFERENCES event_sets(id);


--
-- Name: event_set_members fk_esm_se; Type: FK CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY event_set_members
    ADD CONSTRAINT fk_esm_se FOREIGN KEY (sampling_event_id) REFERENCES samples(id);


--
-- Name: event_set_notes fk_esn_es; Type: FK CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY event_set_notes
    ADD CONSTRAINT fk_esn_es FOREIGN KEY (event_set_id) REFERENCES event_sets(id);


--
-- Name: samples fk_location; Type: FK CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY samples
    ADD CONSTRAINT fk_location FOREIGN KEY (location_id) REFERENCES locations(id);


--
-- Name: location_identifiers fk_location; Type: FK CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY location_identifiers
    ADD CONSTRAINT fk_location FOREIGN KEY (location_id) REFERENCES locations(id);


--
-- Name: taxonomy_identifiers fk_partner_sp; Type: FK CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY taxonomy_identifiers
    ADD CONSTRAINT fk_partner_sp FOREIGN KEY (partner_species_id) REFERENCES partner_species_identifiers(id);


--
-- Name: samples fk_proxy_location; Type: FK CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY samples
    ADD CONSTRAINT fk_proxy_location FOREIGN KEY (proxy_location_id) REFERENCES locations(id);


--
-- Name: identifiers fk_sample; Type: FK CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY identifiers
    ADD CONSTRAINT fk_sample FOREIGN KEY (sample_id) REFERENCES samples(id);


--
-- Name: samples fk_species; Type: FK CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY samples
    ADD CONSTRAINT fk_species FOREIGN KEY (partner_species_id) REFERENCES partner_species_identifiers(id);


--
-- Name: samples fk_study; Type: FK CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY samples
    ADD CONSTRAINT fk_study FOREIGN KEY (study_id) REFERENCES studies(id);


--
-- Name: location_identifiers fk_study_loc; Type: FK CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY location_identifiers
    ADD CONSTRAINT fk_study_loc FOREIGN KEY (study_id) REFERENCES studies(id);


--
-- Name: taxonomy_identifiers fk_taxa; Type: FK CONSTRAINT; Schema: public; Owner: iwright
--

ALTER TABLE ONLY taxonomy_identifiers
    ADD CONSTRAINT fk_taxa FOREIGN KEY (taxonomy_id) REFERENCES taxonomies(id);


--
-- PostgreSQL database dump complete
--

