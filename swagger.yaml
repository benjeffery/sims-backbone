swagger: '2.0'
info:
  description: ''
  version: 1.0.0
  title: Backbone
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: sysadmin@malariagen.net
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: localhost
basePath: /v1
#host: u3bjceceak.execute-api.eu-west-1.amazonaws.com
#basePath: "/dev/sims-backbone-service/v1"
schemes:
  - http
#security:
#  - OauthSecurity: []
tags:
  - name: source
    description: Everything about your sources
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: samplingEvent
    description: Access to Backbone samplingEvents
  - name: report
    description: Reports
securityDefinitions:
    OauthSecurity:
      type: oauth2
      flow: accessCode
      authorizationUrl: "https://sso-dev.cggh.org/sso/oauth2.0/authorize"
      tokenUrl: "https://sso-dev.cggh.org/sso/oauth2.0/accessToken"
      x-tokenInfoUrl: "https://sso-dev.cggh.org/sso/oauth2.0/profile"
paths:
  '/location':
    post:
      tags:
        - location
      description: 'Create a location'
      operationId: createLocation
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: location
          required: true
          schema:
            $ref: '#/definitions/Location'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Location'
  '/location/{locationId}':
    get:
      tags:
        - location
      summary: fetches an location
      description: ''
      operationId: downloadLocation
      produces:
        - application/json
      parameters:
        - name: locationId
          in: path
          description: ID of location to fetch
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Location'
    put:
      tags:
        - location
      summary: updates an location
      description: ''
      operationId: updateLocation
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: locationId
          in: path
          description: ID of location to update
          required: true
          type: string
        - in: body
          name: location
          required: true
          schema:
            $ref: '#/definitions/Location'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Location'
        '404':
          description: Location not found
          schema:
              type: string
    delete:
      tags:
        - location
      summary: deletes an location
      description: ''
      operationId: deleteLocation
      produces:
        - application/json
      parameters:
        - name: locationId
          in: path
          description: ID of location to fetch
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '404':
          description: 'Location not found'
          schema:
              type: string
  '/location/gps/{latitude}/{longitude}':
    get:
      tags:
        - location
      summary: fetches location(s) by GPS
      description: 'Params must be string as negative numbers not handled - https://github.com/pallets/werkzeug/issues/729 - also want to avoid using float'
      operationId: downloadGPSLocation
      produces:
        - application/json
      parameters:
        - name: latitude
          in: path
          description: Latitude of location to fetch
          required: true
          type: string
        - name: longitude
          in: path
          description: Longitude of location to fetch
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Location'
        '404':
          description: 'location not found'
          schema:
              type: string
        '422':
          description: 'bad parameters'
          schema:
              type: string
  '/location/partner/{partnerId}':
    get:
      tags:
        - location
      summary: fetches location(s) by partner name
      description: ''
      operationId: downloadPartnerLocation
      produces:
        - application/json
      parameters:
        - name: partnerId
          in: path
          description: ID of location to fetch
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Locations'
        '404':
          description: 'location not found'
          schema:
              type: string
        '422':
          description: 'invalid key in location'
          schema:
              type: string
  '/locations':
    get:
      tags:
        - location
      summary: fetches locations
      description: ''
      operationId: downloadLocations
      produces:
        - application/json
      parameters:
        - name: studyName
          in: query
          description: restrict to a particular study
          required: false
          type: string
        - name: start
          in: query
          description: for pagination start the result set at a record x
          required: false
          type: integer
        - name: count
          in: query
          description: for pagination the number of entries to return
          required: false
          type: integer
        - name: orderby
          in: query
          description: how to order the result set
          required: false
          type: string
          default: location
          enum:
            - location
            - study_name
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Locations'
  '/samplingEvent':
    post:
      tags:
        - samplingEvent
      description: 'Create a samplingEvent'
      operationId: createSamplingEvent
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: samplingEvent
          required: true
          schema:
            $ref: '#/definitions/SamplingEvent'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SamplingEvent'
  '/samplingEvent/{samplingEventId}':
    get:
      tags:
        - samplingEvent
      summary: fetches an samplingEvent
      description: ''
      operationId: downloadSamplingEvent
      produces:
        - application/json
      parameters:
        - name: samplingEventId
          in: path
          description: ID of samplingEvent to fetch
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SamplingEvent'
    put:
      tags:
        - samplingEvent
      summary: updates an samplingEvent
      description: ''
      operationId: updateSamplingEvent
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: samplingEventId
          in: path
          description: ID of samplingEvent to update
          required: true
          type: string
        - in: body
          name: samplingEvent
          required: true
          schema:
            $ref: '#/definitions/SamplingEvent'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SamplingEvent'
        '404':
          description: SamplingEvent not found
          schema:
              type: string
    delete:
      tags:
        - samplingEvent
      summary: deletes an samplingEvent
      description: ''
      operationId: deleteSamplingEvent
      produces:
        - application/json
      parameters:
        - name: samplingEventId
          in: path
          description: ID of samplingEvent to fetch
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '404':
          description: SamplingEvent not found
  '/samplingEvents/identifier/{propName}/{propValue}':
    get:
      tags:
        - samplingEvent
      summary: fetches a samplingEvent by property value
      description: ''
      operationId: downloadSamplingEventByIdentifier
      produces:
        - application/json
      parameters:
        - name: propName
          in: path
          description: name of property to search
          required: true
          type: string
        - name: propValue
          in: path
          description: matching value of property to search
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SamplingEvent'
  '/samplingEvents/location/{locationId}':
    get:
      tags:
        - samplingEvent
      summary: fetches samplingEvents for a location
      description: ''
      operationId: downloadSamplingEventsByLocation
      produces:
        - application/json
      parameters:
        - name: locationId
          in: path
          description: location
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SamplingEvents'
  '/samplingEvents/study/{studyName}':
    get:
      tags:
        - samplingEvent
      summary: fetches samplingEvents for a study
      description: ''
      operationId: downloadSamplingEventsByStudy
      produces:
        - application/json
      parameters:
        - name: studyName
          in: path
          description: 4 digit study code
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SamplingEvents'
  '/samplingEvents/taxa/{taxaId}':
    get:
      tags:
        - samplingEvent
      summary: fetches samplingEvents for a given taxonomy classification code
      description: ''
      operationId: downloadSamplingEventsByTaxa
      produces:
        - application/json
      parameters:
        - name: taxaId
          in: path
          description: NCBI taxonomy code
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SamplingEvents'
  '/samplingEvents/eventSet/{eventSetId}':
    get:
      tags:
        - samplingEvent
      summary: fetches samplingEvents in a given event set
      description: ''
      operationId: downloadSamplingEventsByEventSet
      produces:
        - application/json
      parameters:
        - name: eventSetId
          in: path
          description: Event Set name
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SamplingEvents'
  '/metadata/country/{countryId}':
    get:
      tags:
        - metadata
      summary: fetches all the names for a country
      description: 'guesses the search criteria'
      operationId: getCountryMetadata
      produces:
        - application/json
      parameters:
        - name: countryId
          in: path
          description: location
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Country'
  '/metadata/taxonomy':
    get:
      tags:
        - metadata
      summary: fetches all the registered taxa
      description: 'guesses the search criteria'
      operationId: getTaxonomyMetadata
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Taxonomies'
    post:
      tags:
        - metadata
      description: 'Create a Taxonomy'
      operationId: createTaxonomy
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: taxonomy
          required: true
          schema:
            $ref: '#/definitions/Taxonomy'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Taxonomy'
  '/studies':
    get:
      tags:
        - study
      summary: fetches studies
      description: ''
      operationId: downloadStudies
      produces:
        - application/json
      parameters:
        - name: start
          in: query
          description: for pagination start the result set at a record x
          required: false
          type: integer
        - name: count
          in: query
          description: for pagination the number of entries to return
          required: false
          type: integer
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Studies'
  '/study/{studyId}':
    get:
      tags:
        - study
      summary: fetches a study
      description: ''
      operationId: downloadStudy
      produces:
        - application/json
      parameters:
        - name: studyId
          in: path
          description: ID of study to fetch
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Study'
    put:
      tags:
        - study
      summary: updates a study
      description: ''
      operationId: updateStudy
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: studyId
          in: path
          description: ID of study to update
          required: true
          type: string
        - in: body
          name: study
          required: true
          schema:
            $ref: '#/definitions/Study'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Study'
        '404':
          description: study not found
          schema:
              type: string
  '/eventSet/{eventSetId}':
    post:
      tags:
        - eventSet
      summary: creates an eventSet
      description: ''
      operationId: createEventSet
      produces:
        - application/json
      parameters:
        - name: eventSetId
          in: path
          description: ID of eventSet to create
          required: true
          type: string
      responses:
        '201':
          description: successful operation
          schema:
            $ref: '#/definitions/EventSet'
    get:
      tags:
        - eventSet
      summary: fetches an eventSet
      description: ''
      operationId: downloadEventSet
      produces:
        - application/json
      parameters:
        - name: eventSetId
          in: path
          description: ID of eventSet to fetch
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/EventSet'
    put:
      tags:
        - eventSet
      summary: updates an eventSet
      description: ''
      operationId: updateEventSet
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: eventSetId
          in: path
          description: ID of eventSet to update
          required: true
          type: string
        - in: body
          name: eventSet
          required: true
          schema:
            $ref: '#/definitions/EventSet'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/EventSet'
        '404':
          description: EventSet not found
          schema:
              type: string
    delete:
      tags:
        - eventSet
      summary: deletes an eventSet
      description: ''
      operationId: deleteEventSet
      produces:
        - application/json
      parameters:
        - name: eventSetId
          in: path
          description: ID of eventSet to delete
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '404':
          description: EventSet not found
  '/eventSet/{eventSetId}/{samplingEventId}':
    post:
      tags:
        - eventSet
      summary: Adds a samplingEvent to an eventSet
      description: ''
      operationId: createEventSetItem
      produces:
        - application/json
      parameters:
        - name: eventSetId
          in: path
          description: ID of eventSet to modify
          required: true
          type: string
        - name: samplingEventId
          in: path
          description: ID of samplingEvent to add to the set
          required: true
          type: string
      responses:
        '201':
          description: successful operation
        '404':
          description: EventSet or samplingEvent not found
    delete:
      tags:
        - eventSet
      summary: deletes a samplingEvent from an eventSet
      description: ''
      operationId: deleteEventSetItem
      produces:
        - application/json
      parameters:
        - name: eventSetId
          in: path
          description: ID of eventSet to modify
          required: true
          type: string
        - name: samplingEventId
          in: path
          description: ID of samplingEvent to remove from the set
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '404':
          description: EventSet or samplingEvent not found
  '/eventSet/{eventSetId}/notes/{noteId}':
    post:
      tags:
        - eventSet
      summary: Adds a note to an eventSet
      description: ''
      operationId: createEventSetNote
      produces:
        - application/json
      parameters:
        - name: eventSetId
          in: path
          description: ID of eventSet to modify
          required: true
          type: string
        - name: noteId
          in: path
          description: ID of note to modify in the set
          required: true
          type: string
        - in: body
          name: note
          required: true
          schema:
            $ref: '#/definitions/EventSetNote'
      responses:
        '201':
          description: successful operation
        '401':
          description: EventSet or samplingEvent not found
    put:
      tags:
        - eventSet
      summary: Adds a note to an eventSet
      description: ''
      operationId: updateEventSetNote
      produces:
        - application/json
      parameters:
        - name: eventSetId
          in: path
          description: ID of eventSet to modify
          required: true
          type: string
        - name: noteId
          in: path
          description: ID of note to modify in the set
          required: true
          type: string
        - in: body
          name: note
          required: true
          schema:
            $ref: '#/definitions/EventSetNote'
      responses:
        '200':
          description: successful operation
        '404':
          description: EventSet or samplingEvent not found
    delete:
      tags:
        - eventSet
      summary: deletes an eventSet note
      description: ''
      operationId: deleteEventSetNote
      produces:
        - application/json
      parameters:
        - name: eventSetId
          in: path
          description: ID of eventSet to modify
          required: true
          type: string
        - name: noteId
          in: path
          description: ID of note to remove from the set
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '404':
          description: EventSet or samplingEvent not found
  '/eventSets':
    get:
      tags:
        - eventSet
      summary: fetches eventSets
      description: ''
      operationId: downloadEventSets
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/EventSets'
definitions:
  SamplingEvents:
    type: object
    properties:
      sampling_events:
        type: array
        items:
          $ref: '#/definitions/SamplingEvent'
      count:
        type: integer
        description: Used when pagination is applied to return the number of results
  SamplingEvent:
    type: object
    properties:
      samplingEvent_id:
        type: string
      study_id:
        type: string
      doc:
        type: string
        format: date
        description: 'Date of collection'
      doc_accuracy:
        type: string
        enum:
            - day
            - month
            - year
      location_id:
        type: string
      location:
        $ref: '#/definitions/Location'
      proxy_location_id:
        type: string
      proxy_location:
        $ref: '#/definitions/Location'
      partner_species:
        type: string
      partner_taxonomies:
        type: array
        items:
            $ref: '#/definitions/Taxonomy'
      identifiers:
        type: array
        items:
            $ref: '#/definitions/Identifier'
  Locations:
    type: object
    properties:
      locations:
        type: array
        items:
          $ref: '#/definitions/Location'
      count:
        type: integer
        description: Used when pagination is applied to return the number of results
  Location:
    type: object
    properties:
      location_id:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      accuracy:
        type: string
        enum:
            - location
            - building
            - city
            - region
            - country
      curated_name:
        type: string
      curation_method:
        type: string
      country:
        type: string
      notes:
        type: string
        nullable: true
      identifiers:
        type: array
        items:
            $ref: '#/definitions/Identifier'
  Taxonomies:
    type: object
    properties:
      taxonomies:
        type: array
        items:
          $ref: '#/definitions/Taxonomy'
      count:
        type: integer
        description: Used when pagination is applied to return the number of results
  Taxonomy:
    type: object
    properties:
      taxonomy_id:
        type: number
      name:
        type: string
      rank:
        type: string
  Identifier:
    type: object
    properties:
      identifier_type:
        type: string
      identifier_value:
        type: string
      study_name:
        type: string
  Country:
    type: object
    properties:
      english:
        type: string
      alpha2:
        type: string
      alpha3:
        type: string
  Studies:
    type: object
    properties:
      studies:
        type: array
        items:
          $ref: '#/definitions/Study'
      count:
        type: integer
        description: Used when pagination is applied to return the number of results
  PartnerSpecies:
    type: object
    properties:
      taxa:
        type: array
        items:
          $ref: '#/definitions/Taxonomy'
      partner_species:
        type: string
        description: the description as supplied by the partner
  Study:
    type: object
    required:
        - code
    properties:
      code:
        type: string
      name:
        type: string
      partner_species:
          type: array
          items:
              $ref: '#/definitions/PartnerSpecies'
      locations:
          $ref: '#/definitions/Locations'
  EventSetNote:
    type: object
    required:
        - note_name
    properties:
      note_name:
        type: string
      note_text:
        type: string
  EventSet:
    type: object
    properties:
      event_set_name:
        type: string
      sampling_events:
        type: array
        items:
          $ref: '#/definitions/SamplingEvent'
      notes:
        type: array
        items:
          $ref: '#/definitions/EventSetNote'
  EventSets:
    type: object
    properties:
      event_sets:
        type: array
        items:
          $ref: '#/definitions/EventSet'
