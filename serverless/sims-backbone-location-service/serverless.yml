# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: sims-backbone-location-service

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
      Resource: "*"
  environment:
    DB_USER: ${file(../config.${self:provider.stage}.json):db_user}
    DATABASE: ${file(../config.${self:provider.stage}.json):database}
    DB_PASSWORD: ${file(../config.${self:provider.stage}.json):db_password}
    DB_HOST: ${file(../config.${self:provider.stage}.json):db_host}
    AUTH_PROFILE_URL: ${file(../config.${self:provider.stage}.json):auth_profile}
  vpc:
    securityGroupIds:
      - "Fn::GetAtt": ServerlessSecurityGroup.GroupId
    subnetIds:
      - Ref: ServerlessSubnetA
      - Ref: ServerlessSubnetB
      - Ref: ServerlessSubnetC
      - Ref: PublicSubnet

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

plugins:
      - serverless-python-requirements

custom:
      pythonRequirements:
              dockerizePip: true

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**
package:
    exclude:
        - requirements.txt
        - serverless.yml
        - node_modules/**
        - venv/**
        - package.json
        - package-lock.json
        - endpoints.txt
        - updateall.sh
        - ../../server/backbone_server/connect.py
    include:
        - handler.py
        - ../../server/bb_server/**
        - ../../server/backbone_server/**/**
        - ../auth/**
        - ../client_secrets.${self:provider.stage}.json

functions:
  auth_func:
    handler: auth/handler.auth
  create_location:
    handler: handler.create_location
    events:
      - http:
          path: sims-backbone-location-service/v1/location
          method: post

  location:
    handler: handler.download_location
    events:
      - http:
          path: sims-backbone-location-service/v1/location/{location_id}
          method: get
          request:
            parameters:
              paths:
                location_id: true

  locations:
    handler: handler.download_locations
    events:
      - http:
          path: sims-backbone-location-service/v1/locations
          method: get
          cors: true
          authorizer:
            name: auth_func
            type: request
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*
          request:
            parameters:
              query:
                study_name: true
                start: false
                count: false
                orderby: false

  location_update:
    handler: handler.update_location
    events:
      - http:
          path: sims-backbone-location-service/v1/location/{location_id}
          method: put
          request:
              parameters:
                  paths:
                      location_id: true

  download_gps_location:
    handler: handler.download_gps_location
    events:
      - http:
          path: sims-backbone-location-service/v1/location/gps/{latitude}/{longitude}
          method: get
          request:
              parameters:
                  paths:
                      latitude: true
                      longitude: true

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    ServerlessVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: "10.0.0.0/16"
        EnableDnsSupport: True
        EnableDnsHostnames: True
    ServerlessSubnetA:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: "10.0.0.0/24"
    ServerlessSubnetB:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: "10.0.1.0/24"
    ServerlessSubnetC:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}c
        CidrBlock: "10.0.2.0/24"
    PublicSubnet:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}c
        CidrBlock: "10.0.3.0/24"
        MapPublicIpOnLaunch: True
    NatGateway:
      Type: AWS::EC2::NatGateway
      DependsOn: NatEIP
      Properties:
        AllocationId:
          Fn::GetAtt:
          - NatEIP
          - AllocationId
        SubnetId:
          Ref: PublicSubnet
    NatEIP:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: ServerlessVPC
    NatRoute:
      Type: AWS::EC2::Route
      DependsOn: NatGateway
      Properties:
        RouteTableId:
          Ref: PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NatGateway
    InternetGateway:
      Type: "AWS::EC2::InternetGateway"
    VPCGateway:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        InternetGatewayId:
          Ref: InternetGateway
        VpcId:
          Ref: ServerlessVPC
    ServerlessSecurityGroup:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId:
          Ref: ServerlessVPC
    ServerlessStorageSecurityGroup:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Ingress for Memcached Cluster & RDS Instance
        VpcId:
          Ref: ServerlessVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId:
            Ref: ServerlessSecurityGroup
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIp: '0.0.0.0/0'
    ServerlessRDSSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "RDS Subnet Group"
        SubnetIds:
        - Ref: ServerlessSubnetA
        - Ref: ServerlessSubnetB
        - Ref: ServerlessSubnetC
        - Ref: PublicSubnet
    ServerlessRDSCluster:
      DependsOn: ServerlessStorageSecurityGroup
      Type: AWS::RDS::DBInstance
      Properties:
        Engine: Postgres
        DBName: ${file(../config.${self:provider.stage}.json):database}
        MasterUsername: ${file(../config.${self:provider.stage}.json):db_user}
        MasterUserPassword: ${file(../config.${self:provider.stage}.json):db_password}
        DBInstanceClass: db.t2.micro
        PubliclyAccessible: True
        AllocatedStorage: 10
        VPCSecurityGroups:
        - "Fn::GetAtt": ServerlessStorageSecurityGroup.GroupId
        DBSubnetGroupName:
          Ref: ServerlessRDSSubnetGroup
