# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: report-service
#service: sims-backbone-service

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
      Resource: "*"
  environment:
    DB_USER: ${file(../config.${self:provider.stage}.json):db_user}
    DATABASE: ${file(../config.${self:provider.stage}.json):database}
    DB_PASSWORD: ${file(../config.${self:provider.stage}.json):db_password}
    DB_HOST: ${cf:sims-backbone-service-${self:provider.stage}.DbHostOutput}
    AUTH_PROFILE_URL: ${file(../config.${self:provider.stage}.json):auth_profile}
    PYTHON_PATH: '.:../server:../server/bb_server'
  vpc:
    securityGroupIds:
      - ${cf:sims-backbone-service-${self:provider.stage}.ServerlessSecurityGroupOutput}
    subnetIds:
      - 'Fn::ImportValue': sims-backbone-service:PublicSubnetA-${self:provider.stage}
      - 'Fn::ImportValue': sims-backbone-service:PublicSubnetB-${self:provider.stage}
      - 'Fn::ImportValue': sims-backbone-service:PublicSubnetC-${self:provider.stage}
  apiGateway:
    restApiId: ${cf:sims-backbone-service-${self:provider.stage}.ApiGatewayRestApi}
    restApiRootResourceId: ${cf:sims-backbone-service-${self:provider.stage}.ApiGatewayRestApiRootResource}

plugins:
      - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true

package:
    exclude:
        - requirements.txt
        - serverless.yml
        - node_modules/**
        - venv/**
        - package.json
        - package-lock.json
        - endpoints.txt
        - updateall.sh
        - ../../server/backbone_server/connect.py
    include:
        - ../util/**
        - report/handler.py
        - ../../server/bb_server/**
        - ../../server/backbone_server/**/**
        - ../client_secrets.${self:provider.stage}.json

functions:

  missing_locations:
    handler: report/handler.missing_locations
    events:
      - http:
          path: missingLocations
          method: get
          cors: true
          timeout: 20
          authorizer:
            name: repAuthFunc
            arn: ${cf:sims-backbone-service-${self:provider.stage}.AuthFunc}
            type: request
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*
  missing_taxon:
    handler: report/handler.missing_taxon
    events:
      - http:
          path: missingTaxon
          method: get
          cors: true
          timeout: 20
          authorizer:
            name: repAuthFunc
            arn: ${cf:sims-backbone-service-${self:provider.stage}.AuthFunc}
            type: request
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*
  multiple_location_gps:
    handler: report/handler.multiple_location_gps
    events:
      - http:
          path: multipleLocationGPS
          method: get
          cors: true
          timeout: 20
          authorizer:
            name: repAuthFunc
            arn: ${cf:sims-backbone-service-${self:provider.stage}.AuthFunc}
            type: request
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*
  multiple_location_names:
    handler: report/handler.multiple_location_names
    events:
      - http:
          path: multipleLocationNames
          method: get
          cors: true
          timeout: 20
          authorizer:
            name: repAuthFunc
            arn: ${cf:sims-backbone-service-${self:provider.stage}.AuthFunc}
            type: request
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*
  uncurated_locations:
    handler: report/handler.uncurated_locations
    events:
      - http:
          path: uncuratedLocations
          method: get
          cors: true
          timeout: 20
          authorizer:
            name: repAuthFunc
            arn: ${cf:sims-backbone-service-${self:provider.stage}.AuthFunc}
            type: request
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*
          request:
            parameters:
              query:
                include_country: false

resources:
  Resources:
    MissingUnderscoreLocationsLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
    MissingUnderscoreTaxonLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
    UncuratedUnderscoreLocationsLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
